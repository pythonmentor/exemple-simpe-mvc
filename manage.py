from functools import wraps

import typer
from django.core.management import call_command

from library import controllers, messages

app = typer.Typer()


def display_messages():
    """
    Affiche une liste de messages avec un symbole distinctif selon le type de message.

    Affiche:
        Les messages avec un symbole distinctif pour chaque type:
        - ‚úÖ pour succ√®s.
        - ‚ùå pour erreur.
        - ‚ÑπÔ∏è pour information.
    """
    for message in messages.get_messages():
        msg_type = message.get("type")
        msg_text = message.get("text")

        if msg_type == "success":
            typer.echo(f"\n‚úÖ Succ√®s : {msg_text}")
        elif msg_type == "error":
            typer.echo(f"\n‚ùå Erreur : {msg_text}")
        elif msg_type == "info":
            typer.echo(f"\n‚ÑπÔ∏è Info : {msg_text}")
        else:
            typer.echo(f"\nüîî Autre : {msg_text}")


@app.command()
def init():
    """
    Initialiser la base de donn√©es en appliquant les migrations.

    Cette commande ex√©cute les migrations n√©cessaires pour initialiser la base de donn√©es.
    """
    call_command("migrate")
    messages.info("Base de donn√©es initialis√©e.")
    display_messages()


@app.command()
def makemigrations():
    """
    Cr√©er les migrations pour la base de donn√©es.

    Cette commande g√©n√®re les migrations bas√©es sur les modifications apport√©es aux mod√®les.
    """
    call_command("makemigrations")
    messages.info("Les migrations ont √©t√© cr√©√©es avec succ√®s.")
    display_messages()


@app.command()
def add_book(title: str, author: str):
    """
    Ajouter un nouveau livre √† la base de donn√©es.

    Cette commande ajoute un livre avec un titre et un auteur fournis par l'utilisateur.

    Args:
        title (str): Le titre du livre.
        author (str): L'auteur du livre.

    Example:
        $ python manage.py add_book "Le Petit Prince" "Antoine de Saint-Exup√©ry"
    """
    book = controllers.add_book(title, author)
    display_messages()


@app.command()
def list_books():
    """
    Lister tous les livres dans la base de donn√©es.

    Cette commande affiche la liste de tous les livres actuellement dans la base de donn√©es.
    Si aucun livre n'est trouv√©, un message informatif est affich√©.
    """
    books = controllers.list_books()
    for book in books:
        typer.echo(f"- {book.title} par {book.author}")
    display_messages()


@app.command()
def remove_books(in_title_search: str):
    """
    Supprimer plusieurs livres correspondant √† une recherche.

    Cette commande permet de rechercher des livres dans la base de donn√©es en fonction d'une cha√Æne de caract√®res dans le titre.
    L'utilisateur est invit√© √† confirmer la suppression pour chaque livre trouv√©.

    Args:
        in_title_search (str): Une cha√Æne de caract√®res pour rechercher des livres par titre.

    Example:
        $ python manage.py remove_books "Prince"
    """
    books = controllers.search_books_by_title(in_title_search)
    for book in books:
        confirm = typer.confirm(
            f">> √ätes-vous s√ªr de vouloir supprimer le livre '{book.title}'?"
        )
        if confirm:
            controllers.remove_book(book)
        else:
            messages.info(f"-> La suppression de '{book.title}' annul√©e.")
        display_messages()

    display_messages()


@app.command()
def remove_all_books():
    """
    Supprimer tous les livres de la base de donn√©es.

    Cette commande demande confirmation avant de supprimer chaque livre pr√©sent dans la base de donn√©es.
    """
    books = controllers.list_books()
    for book in books:
        confirm = typer.confirm(
            f">> √ätes-vous s√ªr de vouloir supprimer le livre '{book.title}'?"
        )
        if confirm:
            controllers.remove_book(book)
        else:
            messages.info(f"La suppression de '{book.title}' annul√©e.")
        display_messages()

    display_messages()


if __name__ == "__main__":
    app()
